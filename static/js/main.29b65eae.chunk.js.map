{"version":3,"sources":["Header.js","Keg.js","KegList.js","EditKeg.js","Employee.js","Error404.js","NewKeg.js","App.js","serviceWorker.js","index.js","KegIcon.svg","InfoIcon.svg"],"names":["Header","imageNumber","Math","round","random","className","Link","to","Keg","props","stockPercent","parseInt","stock","kegButtonID","id","sellAPint","onSellPint","name","type","brand","description","alcoholContent","price","formattedWaitTime","currentRouterPath","onClick","onNewKegSelected","src","InfoIcon","alt","KegIcon","KegList","kegList","map","keg","onKegEdit","key","withRouter","_name","_id","_type","_brand","_alcoholContent","_price","_stock","_formattedWaitTime","_description","onSubmit","event","preventDefault","_inputTime","value","split","_newTime","parseFloat","toFixed","tappedOn","Moment","subtract","history","push","kegFocus","defaultValue","required","ref","input","step","Employee","editKegToggle","Error404","location","pathname","onKegNew","v4","placeholder","App","state","handleNewKegSelected","bind","handleKegNew","handleKegEdit","handleSellPint","newKegList","this","slice","thisKeg","find","e","alert","setState","newKeg","fromNow","waitTimeUpdateTimer","setInterval","updateKegTappedTime","newkegList","forEach","clearInterval","Switch","Route","exact","path","render","component","EditKeg","React","Component","Boolean","window","hostname","match","ReactDOM","HashRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.29b65eae.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nfunction Header(){\n\n  let imageArray = ['(48, 38, 38, .75)', '(43, 38, 48, .75)', '(38, 48, 48, .75)', '(43, 48, 38, .75)'];\n  let imageNumber = (Math.round(Math.random()*3));\n\n  return (\n    <div className=\"mainHeader\">\n      <p className=\"mainHeaderH1\">React Tap Room</p>\n      <p className=\"mainHeaderH3\"><Link to=\"/\">Patrons</Link> | <Link to=\"/Employee\">Employees</Link></p>\n\n      <style>{`\n          .mainHeader {\n            height: 10vh;\n            z-index: 99;\n            background-color: rgba${imageArray[imageNumber]};\n            border-bottom-left-radius:  25%;\n            border-bottom-right-radius: 25%;\n            position: absolute;\n            top: 0px;\n            width: 98%;\n            margin: 0px;\n            animation: header_fade_effect 3s 1;\n          }\n\n          .mainHeaderH1, .mainHeaderH3 {\n            margin: 0px;\n          }\n\n          @keyframes header_fade_effect {\n            0%   { opacity: 0; width:98%;}\n            25%   { width:70%;}\n            50%   { width:200%;}\n            75%   { width:70%;}\n            100% { opacity: 1; width:98%;}\n            from {transform: rotateY(0deg);}\n            to {transform: rotateY(359deg);}\n          }\n\n          `}</style>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport KegIcon from './KegIcon.svg';\nimport InfoIcon from './InfoIcon.svg';\n\nfunction Keg(props){\n\n  function kegInformation() {\n    if (props.currentRouterPath === '/Employee'){\n      return (\n        <div>\n\n          <div onClick={() => {props.onNewKegSelected({name: props.name, type: props.type, brand: props.brand, alcoholContent: props.alcoholContent, price: props.price, stock: props.stock, formattedWaitTime: props.formattedWaitTime, description: props.description, id: props.id});}}>\n            <img src={InfoIcon} className=\"infoIcon\" alt=\"infoIcon\" />\n          </div>\n\n          <p className='divGrid8 kegStockLeft'>({props.stock}<br/>pints left)</p>\n          <button id={'kegButton' + props.id} className='divGrid9 kegSellButton' onClick={sellAPint}>Sell\n            <br/>\n            <br/>\n            <img src={KegIcon} className=\"kegIcon\" alt=\"kegIcon\" />\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <p className='divGrid8 kegStockLeft'>({props.stock}<br/>pints left)</p>\n          <button id={'kegButton' + props.id} className='divGrid9 kegSellButton'>\n            <br/>\n            <img src={KegIcon} className=\"kegIcon\" alt=\"kegIcon\" />\n          </button>\n        </div>\n      );\n    }\n  }\n\n  let stockPercent = parseInt(((props.stock/124)*100));\n  let kegButtonID = ('kegButton' + props.id);\n\n  function sellAPint() {\n    props.onSellPint(props.id);\n  }\n\n  return (\n    <div id={'kegBox' + props.id} className='kegBox'>\n\n      <div className='parentGrid'>\n\n\n        <p className='divGrid1 kegName'>{props.name}</p>\n        <p className='divGrid2 kegType'>• {props.type}</p>\n        <p className='divGrid3 kegBrand'>~{props.brand}</p>\n        <p className='divGrid4 kegDescription'>{props.description}</p>\n        <p className='divGrid5 kegAlcoholContent'>{props.alcoholContent}% abv</p>\n        <p className='divGrid6 kegPrice'>${props.price}/pint</p>\n        <p className='divGrid7 kegTappedOn'>Tapped {props.formattedWaitTime} ago.</p>\n        {kegInformation()}\n      </div>\n\n      <style>{`\n\n          .parentGrid {\n            display: grid;\n            grid-template-columns: repeat(4, 1fr);\n            grid-template-rows: 40px 50px 1fr repeat(2, 40px);\n            grid-column-gap: 10px;\n            grid-row-gap: 0px;\n          }\n\n          .divGrid1 { grid-area: 1 / 1 / 2 / 5; }\n          .divGrid2 { grid-area: 2 / 1 / 3 / 3; }\n          .divGrid3 { grid-area: 2 / 3 / 3 / 5; }\n          .divGrid4 { grid-area: 3 / 1 / 5 / 4; }\n          .divGrid5 { grid-area: 3 / 4 / 4 / 5; }\n          .divGrid6 { grid-area: 4 / 4 / 5 / 5; }\n          .divGrid7 { grid-area: 5 / 1 / 6 / 3; }\n          .divGrid8 { grid-area: 5 / 3 / 6 / 4; }\n          .divGrid9 { grid-area: 5 / 4 / 6 / 5; }\n\n          .parentGrid p {\n            margin-top: 0px;\n            margin-bottom: 0px;\n          }\n\n          .kegName {\n            font-weight: bolder;\n            background-color: rgba(1, 1, 1, .1);\n            border-radius: 25%;\n            height: 22px;\n            margin-left: auto;\n            margin-right: auto;\n            width: 66%;\n          }\n\n          .kegType {\n            text-align: left;\n          }\n\n          .kegBrand {\n            text-align: right;\n          }\n\n          .kegAlcoholContent {\n            text-align: right;\n          }\n\n          .kegPrice {\n            position: absolute;\n            bottom: 60px;\n            right: 10px;\n          }\n\n          .kegTappedOn {\n            position: absolute;\n            bottom: 10px;\n            left: 10px;\n          }\n\n          .kegStockLeft {\n            position: absolute;\n            bottom: 10px;\n            right: 17%;\n            // height: 30px;\n\n          }\n\n          .kegSellButton {\n            position: absolute;\n            bottom: 10px;\n            right: 10px;\n            color: black;\n            height: 45px;\n            width: 35px;\n            border-radius: 25%;\n          }\n\n          #${kegButtonID} {\n            background: linear-gradient(0deg, rgba(0,255,0,.9) 0%, rgba(0,255,0,.9) ${stockPercent}%, rgba(255,0,0,.9) ${stockPercent}%, rgba(255,0,0,.9) 100%);\n          }\n\n          .kegBox {\n            position: relative;\n            background-color: rgba(0, 0, 64, .66);\n            padding: 10px;\n            margin: 10px;\n            flex-grow: 1;\n            flex-basis: 400px;\n            max-width: 500px;\n            border-radius: 5%;\n            box-shadow: 5px 5px 5px rgba(0, 0, 0, .66);\n          }\n\n          .infoIcon {\n            position: absolute;\n            top: 15px;\n            right: 10px;\n            width: 30px;\n            animation: infoIconSpin infinite 3s linear;\n          }\n\n          .kegIcon {\n            position: absolute;\n            bottom: -3px;\n            right: 4px;\n            width: 25px;\n            animation: kegIconSpin infinite 5s linear;\n          }\n\n          @keyframes kegIconSpin {\n            from {transform: rotateX(0deg);}\n            to {transform: rotateX(360deg);}\n          }\n\n          @keyframes infoIconSpin {\n            from {transform: rotateZ(0deg);}\n            to {transform: rotateZ(360deg);}\n          }\n\n          `}</style>\n    </div>\n  );\n}\n\nKeg.propTypes = {\n  alcoholContent: PropTypes.string.isRequired,\n  brand: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  formattedWaitTime: PropTypes.string, //removed 'isRequired' here only for pre-seeded data to not throw an error.\n  name: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n  stock: PropTypes.number.isRequired,\n  type: PropTypes.string.isRequired,\n  onNewKegSelected: PropTypes.func,\n  onSellPint: PropTypes.func,\n  currentRouterPath: PropTypes.string\n};\n\n\nexport default Keg;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Keg from './Keg';\nimport KegIcon from './KegIcon.svg';\nimport InfoIcon from './InfoIcon.svg';\n\n\nfunction KegList(props){\n  function headerReturn() {\n    if (props.currentRouterPath === '/Employee'){\n      return (\n        <div>\n          <h2 className=\"kegListHeader\"><em>EMPLOYEE</em> Keg List:</h2>\n          <h3><em>Employees can sell-a-pint by clicking a keg`&apos;`s <img src={KegIcon} className=\"icon\" alt=\"kegIcon\" />[sell] button, or edit a keg by clicking a keg`&apos;`s <img src={InfoIcon} className=\"icon\" alt=\"infoIcon\" /> button, or add a keg <Link to=\"/NewKeg\">here</Link>.</em></h3>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h2 className=\"kegListHeader\">Keg List</h2>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"kegDivClass\">\n      {headerReturn()}\n      <div className=\"kegListClass\">\n        {props.kegList.map((keg) =>\n          <Keg name={keg.name}\n            type={keg.type}\n            brand={keg.brand}\n            alcoholContent={keg.alcoholContent}\n            price={keg.price}\n            stock={keg.stock}\n            formattedWaitTime={keg.formattedWaitTime}\n            description={keg.description}\n            id={keg.id}\n            onKegEdit={props.onKegEdit}\n            onSellPint={props.onSellPint}\n            onNewKegSelected={props.onNewKegSelected}\n            currentRouterPath={props.currentRouterPath}\n            key={keg.id}/>\n        )}\n        <style>{`\n            .kegDivClass {\n              background-color: rgba(0, 32, 0, .33);\n              border-radius: 25px;\n              min-height: 90vh;\n            }\n\n            .kegListClass {\n              // background-color: rgba(0, 32, 0, .33);\n              border-radius: 25px;\n              display: flex;\n              flex-wrap: wrap;\n              justify-content: space-evenly;\n              align-items: stretch;\n            }\n\n            .kegListHeader{\n              margin: 0px;\n              text-align: center;\n              padding: 10px;\n            }\n\n            .icon{\n              width: 20px;\n            }\n            `}</style>\n      </div>\n    </div>\n  );\n}\n\nKegList.propTypes = {\n  kegList: PropTypes.array,\n  onSellPint: PropTypes.func,\n  onKegEdit: PropTypes.func,\n  onNewKegSelected: PropTypes.func,\n  currentRouterPath: PropTypes.string\n};\n\nexport default KegList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Moment from 'moment';\nimport { withRouter } from 'react-router-dom';\nimport './App.css';\n\nfunction EditKeg(props){\n\n  let _name = null;\n  let _id = null;\n  let _type = null;\n  let _brand = null;\n  let _alcoholContent = null;\n  let _price = null;\n  let _stock = null;\n  let _formattedWaitTime = null;\n  let _description = null;\n\n  function handleEditKegFormSubmission(event) {\n    event.preventDefault();\n\n    let _inputTime = _formattedWaitTime.value.split(' ');\n    let _newTime = parseInt(_inputTime[0]);\n    props.onKegEdit({name: _name.value, type: _type.value, brand: _brand.value, alcoholContent: parseFloat(_alcoholContent.value).toFixed(2), price: parseFloat(_price.value).toFixed(2), stock: parseInt(_stock.value), description: _description.value, id: _id.value, tappedOn: new Moment().subtract(_newTime, 'days')});\n\n    _name = '';\n    _type = '';\n    _brand = '';\n    _alcoholContent = '';\n    _price = '';\n    _stock = '';\n    _description = '';\n\n    props.history.push('/');\n  }\n\n  return (\n\n    <div className='editKegClass' id='editKegID'>\n      <h1>Edit Keg:</h1>\n\n      <form onSubmit={handleEditKegFormSubmission}>\n        <fieldset><legend>Edit this Keg of <em>{props.kegFocus.brand} {props.kegFocus.name}</em>:</legend>\n\n          <input\n            type=\"hidden\"\n            id=\"id\"\n            name=\"id\"\n            defaultValue={props.kegFocus.id}\n            required\n            ref={(input) => {_id = input;}}/>\n\n          <fieldset className='fieldsetInput'>\n            <legend>Beer name:</legend>\n            <input\n              className='inputClass'\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              key={`props.kegFocus.name:${props.kegFocus.name} || _name`}\n              defaultValue={props.kegFocus.name || _name}\n              required\n              ref={(input) => {_name = input;}}/>\n          </fieldset>\n\n          <fieldset className='fieldsetInput'>\n            <legend>Beer type:</legend>\n            <input\n              className='inputClass'\n              type=\"text\"\n              id=\"type\"\n              name=\"type\"\n              key={`props.kegFocus.type:${props.kegFocus.type} || _type`}\n              defaultValue={props.kegFocus.type || _type}\n              required\n              ref={(input) => {_type = input;}}/>\n          </fieldset>\n\n          <fieldset className='fieldsetInput'>\n            <legend>Beer brand:</legend>\n            <input\n              className='inputClass'\n              type=\"text\"\n              id=\"brand\"\n              name=\"brand\"\n              key={`props.kegFocus.brand:${props.kegFocus.brand} || _brand`}\n              defaultValue={props.kegFocus.brand || _brand}\n              required\n              ref={(input) => {_brand = input;}}/>\n          </fieldset>\n\n          <fieldset className='fieldsetInput'>\n            <legend>Alcohol content:</legend>\n            <input\n              className='inputClass'\n              type=\"number\"\n              step=\"0.01\"\n              id=\"alcoholContent\"\n              name=\"alcoholContent\"\n              key={`props.kegFocus.alcoholContent:${props.kegFocus.alcoholContent} || _alcoholContent`}\n              defaultValue={props.kegFocus.alcoholContent || _alcoholContent}\n              required\n              ref={(input) => {_alcoholContent = input;}}/>\n          </fieldset>\n\n\n          <fieldset className='fieldsetInput'>\n            <legend>$/pint:</legend>\n            <input\n              className='inputClass'\n              type=\"number\"\n              step=\"0.01\"\n              id=\"price\"\n              name=\"price\"\n              key={`props.kegFocus.price:${props.kegFocus.price} || _price`}\n              defaultValue={props.kegFocus.price || _price}\n              required\n              ref={(input) => {_price = input;}}/>\n          </fieldset>\n\n\n          <fieldset className='fieldsetInput'>\n            <legend>Stock (in pints):</legend>\n            <input\n              className='inputClass'\n              type=\"number\"\n              id=\"stock\"\n              name=\"stock\"\n              key={`props.kegFocus.stock:${props.kegFocus.stock} || _stock`}\n              defaultValue={props.kegFocus.stock || _stock}\n              required\n              ref={(input) => {_stock = input;}}/>\n          </fieldset>\n\n          <fieldset className='fieldsetInput'>\n            <legend>Tapped how long ago [in ## of days]:</legend>\n            <input\n              className='inputClass'\n              type=\"text\"\n              id=\"formattedWaitTime\"\n              name=\"formattedWaitTime\"\n              key={`props.kegFocus.formattedWaitTime:${props.kegFocus.formattedWaitTime} || _formattedWaitTime`}\n              defaultValue={props.kegFocus.formattedWaitTime || _formattedWaitTime}\n              required\n              ref={(input) => {_formattedWaitTime = input;}}/>\n          </fieldset>\n\n\n          <fieldset className='fieldsetInput'>\n            <legend>Description:</legend>\n            <textarea\n              className='inputClass'\n              id=\"description\"\n              name=\"description\"\n              key={`props.kegFocus.description:${props.kegFocus.description} || _description`}\n              defaultValue={props.kegFocus.description || _description}\n              ref={(input) => {_description = input;}}/>\n\n          </fieldset>\n\n          <button type='submit'>Submit!</button>\n\n        </fieldset>\n      </form>\n\n\n      <style>{`\n        .editKegClass {\n          position: relative;\n          background-color: rgba(166, 250, 118, .1);\n          padding: 10px;\n          margin-left: 10%;\n          margin-right: 10%;\n          max-width: 80%;\n          text-align: left;\n\n        }\n\n        .fieldsetInput {\n          margin-left: 6%;\n          margin-right: 3%;\n        }\n\n        .inputClass {\n          width: 90%;\n          margin-left: 6%;\n          margin-right: 3%;\n        }\n        `}</style>\n    </div>\n  );\n}\n\nEditKeg.propTypes = {\n  onKegEdit: PropTypes.func,\n  kegFocus: PropTypes.func,\n  history: PropTypes.func\n};\n\n\nexport default withRouter(EditKeg);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport KegList from './KegList';\nimport EditKeg from './EditKeg';\n\nfunction Employee(props){\n\n  let editKegToggle = null;\n  if (props.kegFocus != null){\n    editKegToggle =  <EditKeg\n      onKegEdit={props.onKegEdit}\n      kegFocus={props.kegFocus}/>;\n  }\n\n  return (\n    <div>\n      {editKegToggle}\n      <KegList\n        kegList={props.kegList}\n        onSellPint={props.onSellPint}\n        onKegEdit={props.onKegEdit}\n        onNewKegSelected={props.onNewKegSelected}\n        currentRouterPath={props.currentRouterPath} />\n    </div>\n  );\n}\n\nEmployee.propTypes = {\n  kegList: PropTypes.array,\n  onSellPint: PropTypes.func,\n  onKegNew: PropTypes.func,\n  onNewKegSelected: PropTypes.func,\n  currentRouterPath: PropTypes.string.isRequired\n};\n\nEmployee.propTypes = {\n  kegFocus: PropTypes.object,\n  onKegEdit: PropTypes.func\n};\n\nexport default Employee;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nfunction Error404(props){\n  return (\n    <div>\n      <h2>The page {props.location.pathname} you are looking for does not exist!</h2>\n      <h3>Would you like to return <Link to=\"/\">home</Link> instead?</h3>\n    </div>\n  );\n}\n\nError404.propTypes = {\n  location: PropTypes.object\n};\n\nexport default Error404;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 } from 'uuid';\nimport Moment from 'moment';\nimport { withRouter } from 'react-router-dom';\nimport './App.css';\n\nfunction NewKeg(props){\n\n  let _name = null;\n  let _type = null;\n  let _brand = null;\n  let _alcoholContent = null;\n  let _price = null;\n  let _stock = null;\n  let _description = null;\n\n  function handleNewKegFormSubmission(event) {\n    event.preventDefault();\n\n    props.onKegNew({name: _name.value, type: _type.value, brand: _brand.value, alcoholContent: parseFloat(_alcoholContent.value).toFixed(2), price: parseFloat(_price.value).toFixed(2), stock: parseInt(_stock.value), description: _description.value, id: v4(), tappedOn: new Moment()});\n\n    _name = '';\n    _type = '';\n    _brand = '';\n    _alcoholContent = '';\n    _price = '';\n    _stock = '';\n    _description = '';\n\n    props.history.push('/Employee');\n  }\n\n  return (\n\n    <div className='newKegClass'>\n      <h1>Add a Keg</h1>\n\n      <form onSubmit={handleNewKegFormSubmission}>\n        <fieldset><legend>New Keg:</legend>\n\n          <fieldset className='fieldsetInput'>\n            <legend>Beer name:</legend>\n            <input\n              className='inputClass'\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              placeholder='Beer name (required)'\n              required\n              ref={(input) => {_name = input;}}/>\n          </fieldset>\n\n          <fieldset className='fieldsetInput'>\n            <legend>Beer type:</legend>\n            <input\n              className='inputClass'\n              type=\"text\"\n              id=\"type\"\n              name=\"type\"\n              placeholder='Beer type (required)'\n              required\n              ref={(input) => {_type = input;}}/>\n          </fieldset>\n\n          <fieldset className='fieldsetInput'>\n            <legend>Beer brand:</legend>\n            <input\n              className='inputClass'\n              type=\"text\"\n              id=\"brand\"\n              name=\"brand\"\n              placeholder='Beer brand (required)'\n              required\n              ref={(input) => {_brand = input;}}/>\n          </fieldset>\n\n          <fieldset className='fieldsetInput'>\n            <legend>Alcohol content:</legend>\n            <input\n              className='inputClass'\n              type=\"number\"\n              step=\"0.01\"\n              id=\"alcoholContent\"\n              name=\"alcoholContent\"\n              placeholder='Alcohol content (required)'\n              required\n              ref={(input) => {_alcoholContent = input;}}/>\n          </fieldset>\n\n\n          <fieldset className='fieldsetInput'>\n            <legend>$/pint:</legend>\n            <input\n              className='inputClass'\n              type=\"number\"\n              step=\"0.01\"\n              id=\"price\"\n              name=\"price\"\n              placeholder='Price per pint (required)'\n              required\n              ref={(input) => {_price = input;}}/>\n          </fieldset>\n\n\n          <fieldset className='fieldsetInput'>\n            <legend>Stock (in pints):</legend>\n            <input\n              className='inputClass'\n              type=\"number\"\n              id=\"stock\"\n              name=\"stock\"\n              placeholder='Stock (required)'\n              required\n              ref={(input) => {_stock = input;}}/>\n          </fieldset>\n\n\n          <fieldset className='fieldsetInput'>\n            <legend>Description:</legend>\n            <textarea\n              className='inputClass'\n              id=\"description\"\n              name=\"description\"\n              placeholder='Description'\n              ref={(input) => {_description = input;}}/>\n\n          </fieldset>\n\n          <button type='submit'>Submit!</button>\n\n        </fieldset>\n      </form>\n\n\n      <style>{`\n        .newKegClass {\n          position: relative;\n          background-color: rgba(166, 250, 118, .1);\n          padding: 10px;\n          margin-left: 10%;\n          margin-right: 10%;\n          max-width: 80%;\n          text-align: left;\n\n        }\n\n        .fieldsetInput {\n          margin-left: 6%;\n          margin-right: 3%;\n        }\n\n        .inputClass {\n          width: 90%;\n          margin-left: 6%;\n          margin-right: 3%;\n        }\n        `}</style>\n    </div>\n  );\n}\n\nNewKeg.propTypes = {\n  onKegNew: PropTypes.func,\n  history: PropTypes.func\n};\n\n\nexport default withRouter(NewKeg);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Moment from 'moment';\nimport './App.css';\n\nimport Header from './Header';\nimport KegList from './KegList';\nimport Employee from './Employee';\nimport Error404 from './Error404';\n\nimport NewKeg from './NewKeg';\nimport EditKeg from './EditKeg';\n\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      kegList: [{\n        alcoholContent: '4.9',\n        brand: 'Widmer Brothers',\n        description: 'Little spicy, clove, faint banana, nice wheat twang, slightly floral, faint citrus, bready malt, and a little sweetness.',\n        id: 'abc0',\n        name: 'Hefe',\n        price: '3.99',\n        stock: 120,\n        tappedOn: new Moment().subtract(2, 'days'),\n        type: 'German Hefeweizen'\n      },\n      {\n        alcoholContent: '5.1',\n        brand: 'Pfriem',\n        description: 'Sweet aromas of orange and spice, light-creamy flavor and a refreshing finish.',\n        id: 'abc1',\n        name: 'Wit',\n        price: '4.98',\n        stock: 31,\n        tappedOn: new Moment().subtract(2, 'weeks'),\n        type: 'Belgian Wit Ale'\n      },\n      {\n        alcoholContent: '5.1',\n        brand: 'Pfriem',\n        description: 'Sweet aromas of orange and spice, light-creamy flavor and a refreshing finish.',\n        id: 'abc2',\n        name: 'Wit',\n        price: '4.98',\n        stock: 31,\n        tappedOn: new Moment().subtract(2, 'weeks'),\n        type: 'Belgian Wit Ale'\n      },\n      {\n        alcoholContent: '5.1',\n        brand: 'Pfriem',\n        description: 'Sweet aromas of orange and spice, light-creamy flavor and a refreshing finish.',\n        id: 'abc3',\n        name: 'Wit',\n        price: '4.98',\n        stock: 31,\n        tappedOn: new Moment().subtract(2, 'weeks'),\n        type: 'Belgian Wit Ale'\n      },\n      {\n        alcoholContent: '5.1',\n        brand: 'Pfriem',\n        description: 'Sweet aromas of orange and spice, light-creamy flavor and a refreshing finish.',\n        id: 'abc4',\n        name: 'Wit',\n        price: '4.98',\n        stock: 31,\n        tappedOn: new Moment().subtract(2, 'weeks'),\n        type: 'Belgian Wit Ale'\n      },\n      {\n        alcoholContent: '5.1',\n        brand: 'Pfriem',\n        description: 'Sweet aromas of orange and spice, light-creamy flavor and a refreshing finish.',\n        id: 'abc5',\n        name: 'Wit',\n        price: '4.98',\n        stock: 31,\n        tappedOn: new Moment().subtract(2, 'weeks'),\n        type: 'Belgian Wit Ale'\n      },\n      {\n        alcoholContent: '4.74',\n        brand: 'Pabst Blue Ribbon',\n        description: 'Its unique fermentation and maturation process results in a smooth, full bodied beer with a clean, crisp finish with a fine noble hop aroma.',\n        id: 'abc6',\n        name: 'Beer',\n        price: '3.00',\n        stock: 62,\n        tappedOn: new Moment().subtract(2, 'months'),\n        type: 'American Lager'\n      }],\n      kegFocus: null\n    };\n    this.handleNewKegSelected = this.handleNewKegSelected.bind(this);\n    this.handleKegNew = this.handleKegNew.bind(this);\n    this.handleKegEdit = this.handleKegEdit.bind(this);\n    this.handleSellPint = this.handleSellPint.bind(this);\n  }\n\n  handleSellPint(id){\n    const newKegList = this.state.kegList.slice();\n    const thisKeg = newKegList.find(e => e.id === id);\n    if (thisKeg.stock < 1 ) {\n      alert('😔   All out!');\n    } else {\n      thisKeg.stock -= 1;\n      this.setState({kegList: newKegList});\n    }\n  }\n\n  handleKegEdit(keg){\n    this.setState({kegFocus: null});\n    const newKegList = this.state.kegList.slice();\n    const thisKeg = newKegList.find(e => e.id === keg.id);\n    thisKeg.name = keg.name;\n    thisKeg.type = keg.type;\n    thisKeg.brand = keg.brand;\n    thisKeg.alcoholContent = keg.alcoholContent;\n    thisKeg.price = keg.price;\n    thisKeg.stock = keg.stock;\n    thisKeg.description = keg.description;\n    thisKeg.tappedOn = keg.tappedOn;\n    this.setState({kegList: newKegList});\n  }\n\n  handleKegNew(newKeg){\n    const newKegList = this.state.kegList.slice();\n    newKeg.formattedWaitTime = (newKeg.tappedOn).fromNow(true);\n    newKegList.push(newKeg);\n    this.setState({kegList: newKegList});\n  }\n\n  handleNewKegSelected(keg){\n    this.setState({kegFocus: keg});\n  }\n\n  componentDidMount() {\n    this.waitTimeUpdateTimer = setInterval(() =>\n      this.updateKegTappedTime(),\n    1000);\n  }\n\n  updateKegTappedTime() {\n    let newkegList = this.state.kegList.slice();\n    newkegList.forEach((keg) =>\n      keg.formattedWaitTime = (keg.tappedOn).fromNow(true)\n    );\n    this.setState({kegList: newkegList});\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.waitTimeUpdateTimer);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <div className=\"App-header\">\n          <Header/>\n        </div>\n\n        <div className=\"App-body\">\n          <Switch>\n            <Route exact path='/' render={()=><KegList\n              kegList={this.state.kegList} />} />\n            <Route path='/newkeg' render={()=><NewKeg\n              onKegNew={this.handleKegNew} />} />\n\n            <Route path='/Employee' render={(props)=><Employee\n              kegList={this.state.kegList}\n              currentRouterPath={props.location.pathname}\n              onNewKegSelected={this.handleNewKegSelected}\n              onKegEdit={this.handleKegEdit}\n              kegFocus={this.state.kegFocus}\n              onSellPint={this.handleSellPint} />} />\n\n            <Route path='/editkeg' component={EditKeg} />\n\n            <Route component={Error404} />\n          </Switch>\n        </div>\n\n\n\n\n\n\n        <style>{`\n                .App-header {\n                  height: 10vh;\n                  display: flex;\n                  flex-direction: column;\n                  align-items: center;\n                  justify-content: center;\n                  font-size: calc(8px + 2vmin);\n                  margin: 0px;\n                  color: white;\n                }\n\n                .App-body {\n                  height: 90vh;\n                  overflow-y: auto;\n                }\n                `}</style>\n\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  handleKegNew: PropTypes.func,\n  handleSellPint: PropTypes.func,\n  handleKegEdit: PropTypes.func,\n  kegFocus: PropTypes.object,\n  handleNewKegSelected: PropTypes.func\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { HashRouter } from 'react-router-dom';\n\n\nReactDOM.render(<HashRouter>\n  <App />\n</HashRouter>, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/KegIcon.5fa890b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/InfoIcon.f65ba043.svg\";"],"sourceRoot":""}